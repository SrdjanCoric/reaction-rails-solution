{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as types from \"../constants/ActionTypes\";\nexport default function boards() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.FETCH_BOARDS_SUCCESS:\n      return action.boards;\n\n    case types.CREATE_BOARD_SUCCESS:\n      var newBoard = action.board;\n      return state.concat(newBoard);\n\n    case types.FETCH_BOARD_SUCCESS:\n      var excludedBoards = state.filter(function (board) {\n        return board.id !== action.board.id;\n      });\n\n      var _action$board = action.board,\n          lists = _action$board.lists,\n          newBoardWithoutLists = _objectWithoutProperties(_action$board, [\"lists\"]);\n\n      return excludedBoards.concat(newBoardWithoutLists);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/srdjan/Desktop/LS/capstone_ta/reaction_solution/app/javascript/reducers/boards.js"],"names":["types","boards","state","action","type","FETCH_BOARDS_SUCCESS","CREATE_BOARD_SUCCESS","newBoard","board","concat","FETCH_BOARD_SUCCESS","excludedBoards","filter","id","lists","newBoardWithoutLists"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;AAEA,eAAe,SAASC,MAAT,GAAoC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,KAAK,CAACK,oBAAX;AACE,aAAOF,MAAM,CAACF,MAAd;;AACF,SAAKD,KAAK,CAACM,oBAAX;AACE,UAAMC,QAAQ,GAAGJ,MAAM,CAACK,KAAxB;AACA,aAAON,KAAK,CAACO,MAAN,CAAaF,QAAb,CAAP;;AACF,SAAKP,KAAK,CAACU,mBAAX;AACE,UAAMC,cAAc,GAAGT,KAAK,CAACU,MAAN,CACrB,UAAAJ,KAAK;AAAA,eAAIA,KAAK,CAACK,EAAN,KAAaV,MAAM,CAACK,KAAP,CAAaK,EAA9B;AAAA,OADgB,CAAvB;;AADF,0BAI6CV,MAAM,CAACK,KAJpD;AAAA,UAIUM,KAJV,iBAIUA,KAJV;AAAA,UAIoBC,oBAJpB;;AAME,aAAOJ,cAAc,CAACF,MAAf,CAAsBM,oBAAtB,CAAP;;AACF;AACE,aAAOb,KAAP;AAdJ;AAgBD","sourcesContent":["import * as types from \"../constants/ActionTypes\";\n\nexport default function boards(state = [], action) {\n  switch (action.type) {\n    case types.FETCH_BOARDS_SUCCESS:\n      return action.boards;\n    case types.CREATE_BOARD_SUCCESS:\n      const newBoard = action.board;\n      return state.concat(newBoard);\n    case types.FETCH_BOARD_SUCCESS:\n      const excludedBoards = state.filter(\n        board => board.id !== action.board.id\n      );\n      const { lists, ...newBoardWithoutLists } = action.board;\n\n      return excludedBoards.concat(newBoardWithoutLists);\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}