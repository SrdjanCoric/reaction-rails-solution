{"ast":null,"code":"import apiClient from \"../lib/ApiClient\";\nimport * as types from \"../constants/ActionTypes\";\nexport function fetchBoardsRequest() {\n  return {\n    type: types.FETCH_BOARDS_REQUEST\n  };\n}\nexport function fetchBoardsSuccess(boards) {\n  return {\n    type: types.FETCH_BOARDS_SUCCESS,\n    boards: boards\n  };\n}\nexport function createBoardRequest() {\n  return {\n    type: types.CREATE_BOARD_REQUEST\n  };\n}\nexport function createBoardSuccess(board) {\n  return {\n    type: types.CREATE_BOARD_SUCCESS,\n    board: board\n  };\n}\nexport function fetchBoardRequest() {\n  return {\n    type: types.FETCH_BOARD_REQUEST\n  };\n}\nexport function fetchBoardSuccess(board) {\n  return {\n    type: types.FETCH_BOARD_SUCCESS,\n    board: board\n  };\n}\nexport function fetchBoards(token) {\n  return function (dispatch) {\n    dispatch(fetchBoardsRequest());\n    apiClient.getBoards( // token,\n    function (boards) {\n      dispatch(fetchBoardsSuccess(boards));\n    }, function () {\n      localStorage.removeItem(\"jwtToken\");\n      localStorage.removeItem(\"user\");\n    });\n  };\n}\nexport function createBoard(token, board, callback) {\n  return function (dispatch) {\n    dispatch(createBoardRequest()); // apiClient.createBoard(token, board, newBoard => {\n    //   dispatch(createBoardSuccess(newBoard));\n    //   if (callback) {\n    //     callback(newBoard);\n    //   }\n    // });\n\n    apiClient.createBoard(board, function (newBoard) {\n      dispatch(createBoardSuccess(newBoard));\n\n      if (callback) {\n        callback(newBoard);\n      }\n    });\n  };\n}\nexport function fetchBoard(token, id, callback) {\n  return function (dispatch) {\n    dispatch(fetchBoardRequest()); // apiClient.getBoard(token, id, board => {\n    //   dispatch(fetchBoardSuccess(board));\n    //   if (callback) {\n    //     callback(board);\n    //   }\n    // });\n\n    apiClient.getBoard(id, function (board) {\n      dispatch(fetchBoardSuccess(board));\n\n      if (callback) {\n        callback(board);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/home/srdjan/Desktop/LS/capstone_ta/reaction_solution/app/javascript/actions/BoardActions.js"],"names":["apiClient","types","fetchBoardsRequest","type","FETCH_BOARDS_REQUEST","fetchBoardsSuccess","boards","FETCH_BOARDS_SUCCESS","createBoardRequest","CREATE_BOARD_REQUEST","createBoardSuccess","board","CREATE_BOARD_SUCCESS","fetchBoardRequest","FETCH_BOARD_REQUEST","fetchBoardSuccess","FETCH_BOARD_SUCCESS","fetchBoards","token","dispatch","getBoards","localStorage","removeItem","createBoard","callback","newBoard","fetchBoard","id","getBoard"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,0BAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACnC,SAAO;AAAEC,IAAAA,IAAI,EAAEF,KAAK,CAACG;AAAd,GAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AACzC,SAAO;AAAEH,IAAAA,IAAI,EAAEF,KAAK,CAACM,oBAAd;AAAoCD,IAAAA,MAAM,EAANA;AAApC,GAAP;AACD;AAED,OAAO,SAASE,kBAAT,GAA8B;AACnC,SAAO;AAAEL,IAAAA,IAAI,EAAEF,KAAK,CAACQ;AAAd,GAAP;AACD;AAED,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,SAAO;AAAER,IAAAA,IAAI,EAAEF,KAAK,CAACW,oBAAd;AAAoCD,IAAAA,KAAK,EAAEA;AAA3C,GAAP;AACD;AAED,OAAO,SAASE,iBAAT,GAA6B;AAClC,SAAO;AAAEV,IAAAA,IAAI,EAAEF,KAAK,CAACa;AAAd,GAAP;AACD;AAED,OAAO,SAASC,iBAAT,CAA2BJ,KAA3B,EAAkC;AACvC,SAAO;AAAER,IAAAA,IAAI,EAAEF,KAAK,CAACe,mBAAd;AAAmCL,IAAAA,KAAK,EAALA;AAAnC,GAAP;AACD;AAED,OAAO,SAASM,WAAT,CAAqBC,KAArB,EAA4B;AACjC,SAAO,UAASC,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAACjB,kBAAkB,EAAnB,CAAR;AACAF,IAAAA,SAAS,CAACoB,SAAV,EACE;AACA,cAAAd,MAAM,EAAI;AACRa,MAAAA,QAAQ,CAACd,kBAAkB,CAACC,MAAD,CAAnB,CAAR;AACD,KAJH,EAKE,YAAM;AACJe,MAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACD,KARH;AAUD,GAZD;AAaD;AAED,OAAO,SAASC,WAAT,CAAqBL,KAArB,EAA4BP,KAA5B,EAAmCa,QAAnC,EAA6C;AAClD,SAAO,UAASL,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAACX,kBAAkB,EAAnB,CAAR,CADwB,CAExB;AACA;AAEA;AACA;AACA;AACA;;AACAR,IAAAA,SAAS,CAACuB,WAAV,CAAsBZ,KAAtB,EAA6B,UAAAc,QAAQ,EAAI;AACvCN,MAAAA,QAAQ,CAACT,kBAAkB,CAACe,QAAD,CAAnB,CAAR;;AAEA,UAAID,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACC,QAAD,CAAR;AACD;AACF,KAND;AAOD,GAhBD;AAiBD;AAED,OAAO,SAASC,UAAT,CAAoBR,KAApB,EAA2BS,EAA3B,EAA+BH,QAA/B,EAAyC;AAC9C,SAAO,UAASL,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAACN,iBAAiB,EAAlB,CAAR,CADwB,CAExB;AACA;AACA;AACA;AACA;AACA;;AACAb,IAAAA,SAAS,CAAC4B,QAAV,CAAmBD,EAAnB,EAAuB,UAAAhB,KAAK,EAAI;AAC9BQ,MAAAA,QAAQ,CAACJ,iBAAiB,CAACJ,KAAD,CAAlB,CAAR;;AACA,UAAIa,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACb,KAAD,CAAR;AACD;AACF,KALD;AAMD,GAdD;AAeD","sourcesContent":["import apiClient from \"../lib/ApiClient\";\nimport * as types from \"../constants/ActionTypes\";\n\nexport function fetchBoardsRequest() {\n  return { type: types.FETCH_BOARDS_REQUEST };\n}\n\nexport function fetchBoardsSuccess(boards) {\n  return { type: types.FETCH_BOARDS_SUCCESS, boards };\n}\n\nexport function createBoardRequest() {\n  return { type: types.CREATE_BOARD_REQUEST };\n}\n\nexport function createBoardSuccess(board) {\n  return { type: types.CREATE_BOARD_SUCCESS, board: board };\n}\n\nexport function fetchBoardRequest() {\n  return { type: types.FETCH_BOARD_REQUEST };\n}\n\nexport function fetchBoardSuccess(board) {\n  return { type: types.FETCH_BOARD_SUCCESS, board };\n}\n\nexport function fetchBoards(token) {\n  return function(dispatch) {\n    dispatch(fetchBoardsRequest());\n    apiClient.getBoards(\n      // token,\n      boards => {\n        dispatch(fetchBoardsSuccess(boards));\n      },\n      () => {\n        localStorage.removeItem(\"jwtToken\");\n        localStorage.removeItem(\"user\");\n      }\n    );\n  };\n}\n\nexport function createBoard(token, board, callback) {\n  return function(dispatch) {\n    dispatch(createBoardRequest());\n    // apiClient.createBoard(token, board, newBoard => {\n    //   dispatch(createBoardSuccess(newBoard));\n\n    //   if (callback) {\n    //     callback(newBoard);\n    //   }\n    // });\n    apiClient.createBoard(board, newBoard => {\n      dispatch(createBoardSuccess(newBoard));\n\n      if (callback) {\n        callback(newBoard);\n      }\n    });\n  };\n}\n\nexport function fetchBoard(token, id, callback) {\n  return function(dispatch) {\n    dispatch(fetchBoardRequest());\n    // apiClient.getBoard(token, id, board => {\n    //   dispatch(fetchBoardSuccess(board));\n    //   if (callback) {\n    //     callback(board);\n    //   }\n    // });\n    apiClient.getBoard(id, board => {\n      dispatch(fetchBoardSuccess(board));\n      if (callback) {\n        callback(board);\n      }\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}