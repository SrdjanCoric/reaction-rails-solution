{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { connect } from \"react-redux\";\nimport ToggleableAddCard from \"./ToggleableAddCard\";\nimport * as actions from \"../../actions/CardActions\";\nimport calculatePosition from \"../../lib/PositionCalculator\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    dispatch: dispatch\n  };\n};\n\nvar mergeStateToProps = function mergeStateToProps(stateProps, dispatchProps, ownProps) {\n  var cardsFromList = stateProps.state.cards.filter(function (card) {\n    return card.listId === ownProps.listId;\n  });\n  var targetPosition = cardsFromList.length;\n  var position = calculatePosition(cardsFromList, targetPosition);\n  var token = localStorage.getItem(\"jwtToken\");\n  return _objectSpread({\n    onAddCard: function onAddCard(title, callback) {\n      dispatchProps.dispatch(actions.createCard(token, ownProps.listId, {\n        title: title,\n        position: position\n      }, callback));\n    }\n  }, ownProps);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps, mergeStateToProps)(ToggleableAddCard);","map":{"version":3,"sources":["/home/srdjan/Desktop/LS/capstone_ta/reaction_solution/app/javascript/components/list/ToggleableAddCardContainer.jsx"],"names":["connect","ToggleableAddCard","actions","calculatePosition","mapStateToProps","state","mapDispatchToProps","dispatch","mergeStateToProps","stateProps","dispatchProps","ownProps","cardsFromList","cards","filter","card","listId","targetPosition","length","position","token","localStorage","getItem","onAddCard","title","callback","createCard"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACLA,IAAAA,KAAK,EAALA;AADK,GAAP;AAGD,CAJD;;AAMA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACLA,IAAAA,QAAQ,EAARA;AADK,GAAP;AAGD,CAJD;;AAMA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,UAAD,EAAaC,aAAb,EAA4BC,QAA5B,EAAyC;AACjE,MAAIC,aAAa,GAAGH,UAAU,CAACJ,KAAX,CAAiBQ,KAAjB,CAAuBC,MAAvB,CAClB,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,MAAL,KAAgBL,QAAQ,CAACK,MAA7B;AAAA,GADc,CAApB;AAGA,MAAIC,cAAc,GAAGL,aAAa,CAACM,MAAnC;AACA,MAAIC,QAAQ,GAAGhB,iBAAiB,CAACS,aAAD,EAAgBK,cAAhB,CAAhC;AACA,MAAIG,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAZ;AACA;AACEC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAQC,QAAR,EAAqB;AAC9Bf,MAAAA,aAAa,CAACH,QAAd,CACEL,OAAO,CAACwB,UAAR,CACEN,KADF,EAEET,QAAQ,CAACK,MAFX,EAGE;AAAEQ,QAAAA,KAAK,EAALA,KAAF;AAASL,QAAAA,QAAQ,EAARA;AAAT,OAHF,EAIEM,QAJF,CADF;AAQD;AAVH,KAWKd,QAXL;AAaD,CApBD;;AAsBA,eAAeX,OAAO,CACpBI,eADoB,EAEpBE,kBAFoB,EAGpBE,iBAHoB,CAAP,CAIbP,iBAJa,CAAf","sourcesContent":["import { connect } from \"react-redux\";\nimport ToggleableAddCard from \"./ToggleableAddCard\";\nimport * as actions from \"../../actions/CardActions\";\nimport calculatePosition from \"../../lib/PositionCalculator\";\n\nconst mapStateToProps = state => {\n  return {\n    state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch\n  };\n};\n\nconst mergeStateToProps = (stateProps, dispatchProps, ownProps) => {\n  let cardsFromList = stateProps.state.cards.filter(\n    card => card.listId === ownProps.listId\n  );\n  let targetPosition = cardsFromList.length;\n  let position = calculatePosition(cardsFromList, targetPosition);\n  let token = localStorage.getItem(\"jwtToken\");\n  return {\n    onAddCard: (title, callback) => {\n      dispatchProps.dispatch(\n        actions.createCard(\n          token,\n          ownProps.listId,\n          { title, position },\n          callback\n        )\n      );\n    },\n    ...ownProps\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeStateToProps\n)(ToggleableAddCard);\n"]},"metadata":{},"sourceType":"module"}