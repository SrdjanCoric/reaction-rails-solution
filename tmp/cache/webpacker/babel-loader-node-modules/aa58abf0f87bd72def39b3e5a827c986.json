{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as types from \"../constants/ActionTypes\";\n\nvar lists = function lists() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.FETCH_BOARD_SUCCESS:\n      var _lists = action.board.lists;\n\n      var listsWithoutCards = _lists.map(function (list) {\n        var cards = list.cards,\n            listWithoutCards = _objectWithoutProperties(list, [\"cards\"]);\n\n        return listWithoutCards;\n      });\n\n      var filteredLists = state.filter(function (list) {\n        return list.board_id !== action.board.id;\n      });\n      return filteredLists.concat(listsWithoutCards);\n\n    case types.CREATE_LIST_SUCCESS:\n      return state.concat(action.payload.list);\n\n    case types.UPDATE_LIST_SUCCESS:\n      return state.map(function (list) {\n        if (list.id === action.payload.listId) {\n          return Object.assign({}, list, {\n            title: action.payload.newList.title,\n            position: action.payload.newList.position\n          });\n        } else {\n          return list;\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default lists;","map":{"version":3,"sources":["/home/srdjan/Desktop/LS/capstone_ta/reaction_solution/app/javascript/reducers/lists.js"],"names":["types","lists","state","action","type","FETCH_BOARD_SUCCESS","board","listsWithoutCards","map","list","cards","listWithoutCards","filteredLists","filter","board_id","id","concat","CREATE_LIST_SUCCESS","payload","UPDATE_LIST_SUCCESS","listId","Object","assign","title","newList","position"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,0BAAvB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,KAAK,CAACK,mBAAX;AAAA,UACUJ,MADV,GACoBE,MAAM,CAACG,KAD3B,CACUL,KADV;;AAGE,UAAIM,iBAAiB,GAAGN,MAAK,CAACO,GAAN,CAAU,UAAAC,IAAI,EAAI;AAAA,YAChCC,KADgC,GACDD,IADC,CAChCC,KADgC;AAAA,YACtBC,gBADsB,4BACDF,IADC;;AAExC,eAAOE,gBAAP;AACD,OAHuB,CAAxB;;AAIA,UAAIC,aAAa,GAAGV,KAAK,CAACW,MAAN,CAClB,UAAAJ,IAAI;AAAA,eAAIA,IAAI,CAACK,QAAL,KAAkBX,MAAM,CAACG,KAAP,CAAaS,EAAnC;AAAA,OADc,CAApB;AAGA,aAAOH,aAAa,CAACI,MAAd,CAAqBT,iBAArB,CAAP;;AACF,SAAKP,KAAK,CAACiB,mBAAX;AACE,aAAOf,KAAK,CAACc,MAAN,CAAab,MAAM,CAACe,OAAP,CAAeT,IAA5B,CAAP;;AACF,SAAKT,KAAK,CAACmB,mBAAX;AACE,aAAOjB,KAAK,CAACM,GAAN,CAAU,UAAAC,IAAI,EAAI;AACvB,YAAIA,IAAI,CAACM,EAAL,KAAYZ,MAAM,CAACe,OAAP,CAAeE,MAA/B,EAAuC;AACrC,iBAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,IAAlB,EAAwB;AAC7Bc,YAAAA,KAAK,EAAEpB,MAAM,CAACe,OAAP,CAAeM,OAAf,CAAuBD,KADD;AAE7BE,YAAAA,QAAQ,EAAEtB,MAAM,CAACe,OAAP,CAAeM,OAAf,CAAuBC;AAFJ,WAAxB,CAAP;AAID,SALD,MAKO;AACL,iBAAOhB,IAAP;AACD;AACF,OATM,CAAP;;AAUF;AACE,aAAOP,KAAP;AA1BJ;AA4BD,CA7BD;;AA+BA,eAAeD,KAAf","sourcesContent":["import * as types from \"../constants/ActionTypes\";\n\nconst lists = (state = [], action) => {\n  switch (action.type) {\n    case types.FETCH_BOARD_SUCCESS:\n      const { lists } = action.board;\n\n      let listsWithoutCards = lists.map(list => {\n        const { cards, ...listWithoutCards } = list;\n        return listWithoutCards;\n      });\n      let filteredLists = state.filter(\n        list => list.board_id !== action.board.id\n      );\n      return filteredLists.concat(listsWithoutCards);\n    case types.CREATE_LIST_SUCCESS:\n      return state.concat(action.payload.list);\n    case types.UPDATE_LIST_SUCCESS:\n      return state.map(list => {\n        if (list.id === action.payload.listId) {\n          return Object.assign({}, list, {\n            title: action.payload.newList.title,\n            position: action.payload.newList.position\n          });\n        } else {\n          return list;\n        }\n      });\n    default:\n      return state;\n  }\n};\n\nexport default lists;\n"]},"metadata":{},"sourceType":"module"}