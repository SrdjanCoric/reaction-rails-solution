{"ast":null,"code":"import axios from \"axios\";\nimport * as routes from \"../constants/ApiRoutes\";\nimport { clearStorage } from \"../utils/helpers\";\n\nfunction logError(errorResponse) {\n  var response = errorResponse.response;\n\n  if (response.status === 401) {\n    clearStorage();\n  }\n\n  if (response && response.data && response.data.error) {\n    console.error(\"HTTP Error: \".concat(response.data.error));\n  } else {\n    console.error(\"Error: \", errorResponse);\n  }\n}\n\nfunction unwrapData(response) {\n  return response.data;\n}\n\naxios.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.headers.common[\"Accept\"] = \"application/json\";\nvar apiClient = {\n  // getBoards: function (token, callback, error) {\n  //   let config = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   };\n  //   return axios\n  //     .get(routes.BOARDS_INDEX_URL, config)\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch((res) => logError(res, error));\n  // },\n  // createBoard: function (token, board, callback) {\n  //   let config = {\n  //     method: \"POST\",\n  //     url: routes.CREATE_BOARD_URL,\n  //     data: { board },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // getBoard: function (token, id, callback, error) {\n  //   let config = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   };\n  //   return axios\n  //     .get(routes.getBoardUrl(id), config)\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch((res) => logError(res, error));\n  // },\n  // createList: function (token, boardId, title, position, callback) {\n  //   let config = {\n  //     method: \"POST\",\n  //     url: routes.CREATE_LIST_URL,\n  //     data: { boardId, title, position },\n  //     headers: { Authorization: `Bearer + ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // updateList: function (token, listId, list, callback) {\n  //   let config = {\n  //     method: \"PUT\",\n  //     url: routes.updateListUrl(listId),\n  //     data: { list },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // createCard: function (token, listId, card, callback) {\n  //   let config = {\n  //     method: \"POST\",\n  //     url: routes.CREATE_CARD_URL,\n  //     data: { listId, card },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // getCard: function (token, id, callback, error) {\n  //   let config = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   };\n  //   return axios\n  //     .get(routes.getCardUrl(id), config)\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch((res) => logError(res, error));\n  // },\n  // updateCard: function (token, cardId, attrs, callback) {\n  //   let config = {\n  //     method: \"PUT\",\n  //     url: routes.updateCardUrl(cardId),\n  //     data: { attrs },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // deleteCard: function (token, cardId, callback) {\n  //   let config = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   };\n  //   return axios\n  //     .delete(routes.deleteCardUrl(cardId), config)\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch(logError);\n  // },\n  // createComment: function (token, cardId, text, callback) {\n  //   let config = {\n  //     method: \"POST\",\n  //     url: routes.CREATE_COMMENT_URL,\n  //     data: { cardId, text },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // login: function (user, callback, error) {\n  //   return axios\n  //     .post(routes.LOGIN, { user })\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch((res) => logError(res, error));\n  // },\n  // signup: function (user, callback) {\n  //   return axios\n  //     .post(routes.SIGNUP, { user })\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch(logError);\n  // },\n  getBoards: function getBoards(callback) {\n    return axios.get(routes.BOARDS_INDEX_URL).then(unwrapData).then(callback)[\"catch\"](logError);\n  },\n  getBoard: function getBoard(boardId, callback) {\n    return axios.get(routes.boardUrl(boardId)).then(unwrapData).then(callback)[\"catch\"](logError);\n  },\n  createBoard: function createBoard(board, callback) {\n    return axios.post(routes.CREATE_BOARD_URL, {\n      board: board\n    }).then(unwrapData).then(callback)[\"catch\"](logError);\n  },\n  createList: function createList(boardId, list, callback) {\n    return axios.post(routes.CREATE_LIST_URL, {\n      board_id: boardId,\n      list: list\n    }).then(unwrapData).then(callback)[\"catch\"](logError);\n  },\n  updateList: function updateList(listId, updatedList, callback) {\n    return axios.put(routes.updateListUrl(listId), {\n      list: updatedList\n    }).then(unwrapData).then(callback)[\"catch\"](logError);\n  },\n  createCard: function createCard(listId, card, callback) {\n    return axios.post(routes.CREATE_CARD_URL, {\n      list_id: listId,\n      card: card\n    }).then(unwrapData).then(callback)[\"catch\"](logError);\n  },\n  getCard: function getCard(cardId, callback) {\n    return axios.get(routes.cardUrl(cardId)).then(unwrapData).then(callback)[\"catch\"](logError);\n  },\n  updateCard: function updateCard(cardId, attrs, callback) {\n    return axios.put(routes.updateCardUrl(cardId), {\n      card: attrs\n    }).then(unwrapData).then(callback)[\"catch\"](logError);\n  },\n  createComment: function createComment(cardId, attrs, callback) {\n    return axios.post(routes.CREATE_COMMENT_URL, {\n      card_id: cardId,\n      comment: attrs\n    }).then(unwrapData).then(callback)[\"catch\"](logError);\n  }\n};\nexport default apiClient;","map":{"version":3,"sources":["/home/srdjan/Desktop/LS/capstone_ta/reaction_solution/app/javascript/lib/ApiClient.js"],"names":["axios","routes","clearStorage","logError","errorResponse","response","status","data","error","console","unwrapData","defaults","headers","common","apiClient","getBoards","callback","get","BOARDS_INDEX_URL","then","getBoard","boardId","boardUrl","createBoard","board","post","CREATE_BOARD_URL","createList","list","CREATE_LIST_URL","board_id","updateList","listId","updatedList","put","updateListUrl","createCard","card","CREATE_CARD_URL","list_id","getCard","cardId","cardUrl","updateCard","attrs","updateCardUrl","createComment","CREATE_COMMENT_URL","card_id","comment"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport * as routes from \"../constants/ApiRoutes\";\nimport { clearStorage } from \"../utils/helpers\";\n\nfunction logError(errorResponse) {\n  const response = errorResponse.response;\n\n  if (response.status === 401) {\n    clearStorage();\n  }\n\n  if (response && response.data && response.data.error) {\n    console.error(`HTTP Error: ${response.data.error}`);\n  } else {\n    console.error(\"Error: \", errorResponse);\n  }\n}\n\nfunction unwrapData(response) {\n  return response.data;\n}\n\naxios.defaults.headers.common[\"X-Requested-With\"] = \"XMLHttpRequest\";\naxios.defaults.headers.common[\"Accept\"] = \"application/json\";\n\nconst apiClient = {\n  // getBoards: function (token, callback, error) {\n  //   let config = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   };\n  //   return axios\n  //     .get(routes.BOARDS_INDEX_URL, config)\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch((res) => logError(res, error));\n  // },\n  // createBoard: function (token, board, callback) {\n  //   let config = {\n  //     method: \"POST\",\n  //     url: routes.CREATE_BOARD_URL,\n  //     data: { board },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // getBoard: function (token, id, callback, error) {\n  //   let config = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   };\n  //   return axios\n  //     .get(routes.getBoardUrl(id), config)\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch((res) => logError(res, error));\n  // },\n  // createList: function (token, boardId, title, position, callback) {\n  //   let config = {\n  //     method: \"POST\",\n  //     url: routes.CREATE_LIST_URL,\n  //     data: { boardId, title, position },\n  //     headers: { Authorization: `Bearer + ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // updateList: function (token, listId, list, callback) {\n  //   let config = {\n  //     method: \"PUT\",\n  //     url: routes.updateListUrl(listId),\n  //     data: { list },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // createCard: function (token, listId, card, callback) {\n  //   let config = {\n  //     method: \"POST\",\n  //     url: routes.CREATE_CARD_URL,\n  //     data: { listId, card },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // getCard: function (token, id, callback, error) {\n  //   let config = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   };\n  //   return axios\n  //     .get(routes.getCardUrl(id), config)\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch((res) => logError(res, error));\n  // },\n  // updateCard: function (token, cardId, attrs, callback) {\n  //   let config = {\n  //     method: \"PUT\",\n  //     url: routes.updateCardUrl(cardId),\n  //     data: { attrs },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // deleteCard: function (token, cardId, callback) {\n  //   let config = {\n  //     headers: {\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   };\n  //   return axios\n  //     .delete(routes.deleteCardUrl(cardId), config)\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch(logError);\n  // },\n  // createComment: function (token, cardId, text, callback) {\n  //   let config = {\n  //     method: \"POST\",\n  //     url: routes.CREATE_COMMENT_URL,\n  //     data: { cardId, text },\n  //     headers: { Authorization: `Bearer ${token}` },\n  //   };\n  //   return axios(config).then(unwrapData).then(callback).catch(logError);\n  // },\n  // login: function (user, callback, error) {\n  //   return axios\n  //     .post(routes.LOGIN, { user })\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch((res) => logError(res, error));\n  // },\n  // signup: function (user, callback) {\n  //   return axios\n  //     .post(routes.SIGNUP, { user })\n  //     .then(unwrapData)\n  //     .then(callback)\n  //     .catch(logError);\n  // },\n  getBoards: function(callback) {\n    return axios.get(routes.BOARDS_INDEX_URL)\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  getBoard: function(boardId, callback) {\n    return axios.get(routes.boardUrl(boardId))\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  createBoard: function(board, callback) {\n    return axios.post(routes.CREATE_BOARD_URL, { board })\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  createList: function(boardId, list, callback) {\n    return axios.post(routes.CREATE_LIST_URL, { board_id: boardId, list })\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  updateList: function(listId, updatedList, callback) {\n    return axios.put(\n      routes.updateListUrl(listId), { list: updatedList }\n    )\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  createCard: function(listId, card, callback) {\n    return axios.post(\n      routes.CREATE_CARD_URL, { list_id: listId, card }\n    )\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  getCard: function(cardId, callback) {\n    return axios.get(routes.cardUrl(cardId))\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError);\n  },\n  updateCard: function(cardId, attrs, callback) {\n    return axios.put(routes.updateCardUrl(cardId), { card: attrs })\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError)\n  },\n  createComment: function(cardId, attrs, callback) {\n    return axios.post(routes.CREATE_COMMENT_URL, { card_id: cardId, comment: attrs })\n      .then(unwrapData)\n      .then(callback)\n      .catch(logError)\n  }\n};\n\nexport default apiClient;\n"]},"metadata":{},"sourceType":"module"}