{"ast":null,"code":"import apiClient from \"../lib/ApiClient\";\nimport * as types from \"../constants/ActionTypes\";\nexport function createCardRequest() {\n  return {\n    type: types.CREATE_CARD_REQUEST\n  };\n}\nexport function createCardSuccess(card) {\n  return {\n    type: types.CREATE_CARD_SUCCESS,\n    payload: {\n      card: card\n    }\n  };\n}\nexport function fetchCardRequest() {\n  return {\n    type: types.FETCH_CARD_REQUEST\n  };\n}\nexport function fetchCardSuccess(card) {\n  return {\n    type: types.FETCH_CARD_SUCCESS,\n    payload: {\n      card: card\n    }\n  };\n}\nexport function updateCardRequest() {\n  return {\n    type: types.UPDATE_CARD_REQUEST\n  };\n}\nexport function updateCardSuccess(card) {\n  return {\n    type: types.UPDATE_CARD_SUCCESS,\n    payload: {\n      card: card\n    }\n  };\n}\nexport function deleteCardRequest() {\n  return {\n    type: types.DELETE_CARD_REQUEST\n  };\n}\nexport function deleteCardSuccess(cardId) {\n  return {\n    type: types.DELETE_CARD_SUCCESS,\n    payload: {\n      cardId: cardId\n    }\n  };\n}\nexport function createCard(token, listId, card, callback) {\n  return function (dispatch) {\n    dispatch(createCardRequest); // apiClient.createCard(token, listId, card, data => {\n    //   dispatch(createCardSuccess(data.card));\n    //   if (callback) {\n    //     callback(data.card);\n    //   }\n    // });\n\n    apiClient.createCard(listId, card, function (newCard) {\n      dispatch(createCardSuccess(newCard));\n\n      if (callback) {\n        callback(newCard);\n      }\n    });\n  };\n}\nexport function fetchCard(token, id) {\n  return function (dispatch) {\n    dispatch(fetchCardRequest()); // apiClient.getCard(token, id, data => {\n    //   dispatch(fetchCardSuccess(data.card));\n    // });\n\n    apiClient.getCard(id, function (card) {\n      dispatch(fetchCardSuccess(card));\n    });\n  };\n}\nexport function updateCard(token, cardId, attrs, callback) {\n  return function (dispatch) {\n    dispatch(updateCardRequest()); // apiClient.updateCard(token, cardId, attrs, data => {\n    //   dispatch(updateCardSuccess(data.card));\n    //   if (callback) callback(data.card);\n    // });\n\n    apiClient.updateCard(cardId, attrs, function (updatedCard) {\n      dispatch(updateCardSuccess(updatedCard));\n      if (callback) callback(updatedCard);\n    });\n  };\n}\nexport function deleteCard(token, cardId, callback) {\n  return function (dispatch) {\n    dispatch(deleteCardRequest()); // apiClient.deleteCard(token, cardId, data => {\n    //   dispatch(deleteCardSuccess(data.card.id));\n    //   if (callback) callback();\n    // });\n\n    apiClient.deleteCard(cardId, function (data) {\n      dispatch(deleteCardSuccess(data.card.id));\n      if (callback) callback();\n    });\n  };\n}","map":{"version":3,"sources":["/home/srdjan/Desktop/LS/capstone_ta/reaction_solution/app/javascript/actions/CardActions.js"],"names":["apiClient","types","createCardRequest","type","CREATE_CARD_REQUEST","createCardSuccess","card","CREATE_CARD_SUCCESS","payload","fetchCardRequest","FETCH_CARD_REQUEST","fetchCardSuccess","FETCH_CARD_SUCCESS","updateCardRequest","UPDATE_CARD_REQUEST","updateCardSuccess","UPDATE_CARD_SUCCESS","deleteCardRequest","DELETE_CARD_REQUEST","deleteCardSuccess","cardId","DELETE_CARD_SUCCESS","createCard","token","listId","callback","dispatch","newCard","fetchCard","id","getCard","updateCard","attrs","updatedCard","deleteCard","data"],"mappings":"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","sourcesContent":["import apiClient from \"../lib/ApiClient\";\nimport * as types from \"../constants/ActionTypes\";\n\nexport function createCardRequest() {\n  return { type: types.CREATE_CARD_REQUEST };\n}\n\nexport function createCardSuccess(card) {\n  return { type: types.CREATE_CARD_SUCCESS, payload: { card } };\n}\n\nexport function fetchCardRequest() {\n  return { type: types.FETCH_CARD_REQUEST };\n}\n\nexport function fetchCardSuccess(card) {\n  return { type: types.FETCH_CARD_SUCCESS, payload: { card } };\n}\n\nexport function updateCardRequest() {\n  return { type: types.UPDATE_CARD_REQUEST };\n}\n\nexport function updateCardSuccess(card) {\n  return { type: types.UPDATE_CARD_SUCCESS, payload: { card } };\n}\n\nexport function deleteCardRequest() {\n  return { type: types.DELETE_CARD_REQUEST };\n}\n\nexport function deleteCardSuccess(cardId) {\n  return { type: types.DELETE_CARD_SUCCESS, payload: { cardId } };\n}\n\nexport function createCard(token, listId, card, callback) {\n  return function(dispatch) {\n    dispatch(createCardRequest);\n    // apiClient.createCard(token, listId, card, data => {\n    //   dispatch(createCardSuccess(data.card));\n    //   if (callback) {\n    //     callback(data.card);\n    //   }\n    // });\n    apiClient.createCard(listId, card, newCard => {\n      dispatch(createCardSuccess(newCard));\n      if (callback) {\n        callback(newCard);\n      }\n    });\n  };\n}\n\nexport function fetchCard(token, id) {\n  return function(dispatch) {\n    dispatch(fetchCardRequest());\n    // apiClient.getCard(token, id, data => {\n    //   dispatch(fetchCardSuccess(data.card));\n    // });\n    apiClient.getCard(id, card => {\n      dispatch(fetchCardSuccess(card));\n    });\n  };\n}\n\nexport function updateCard(token, cardId, attrs, callback) {\n  return function(dispatch) {\n    dispatch(updateCardRequest());\n    // apiClient.updateCard(token, cardId, attrs, data => {\n    //   dispatch(updateCardSuccess(data.card));\n    //   if (callback) callback(data.card);\n    // });\n    apiClient.updateCard(cardId, attrs, updatedCard => {\n      dispatch(updateCardSuccess(updatedCard));\n      if (callback) callback(updatedCard);\n    });\n  };\n}\n\nexport function deleteCard(token, cardId, callback) {\n  return function(dispatch) {\n    dispatch(deleteCardRequest());\n    // apiClient.deleteCard(token, cardId, data => {\n    //   dispatch(deleteCardSuccess(data.card.id));\n    //   if (callback) callback();\n    // });\n    apiClient.deleteCard( cardId, data => {\n      dispatch(deleteCardSuccess(data.card.id));\n      if (callback) callback();\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}